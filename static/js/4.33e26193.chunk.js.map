{"version":3,"sources":["components/table-component/index.js"],"names":["sortReducer","state","action","type","direction","column","data","_","orderBy","Error","numberWithCommas","x","toString","replace","TabularData","covidData","useReducer","dispatch","className","unstackable","inverted","style","backgroundColor","marginTop","sortable","celled","Header","Row","HeaderCell","sorted","onClick","Body","map","country","cases","todayCases","deaths","todayDeaths","recovered","active","critical","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","population","key","Cell"],"mappings":"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","file":"static/js/4.33e26193.chunk.js","sourcesContent":["import React, { useReducer } from 'react'\r\nimport _ from 'lodash'\r\nimport { Table } from 'semantic-ui-react'\r\n\r\nfunction sortReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CHANGE_SORT':\r\n      const direction = state.direction === 'ascending' ? 'desc' : 'asc';\r\n      return {\r\n        ...state,\r\n        column: action.column,\r\n        data:  _.orderBy(state.data, [action.column], [direction]),\r\n        direction:\r\n          state.direction === 'ascending' ? 'descending' : 'ascending',\r\n      }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction numberWithCommas(x) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nconst TabularData = ({covidData }) => {\r\n    const [state, dispatch] = useReducer(sortReducer, {\r\n      column: null,\r\n      data: covidData,\r\n      direction: 'descending',\r\n    })\r\n    const { column, data, direction } = state\r\n\r\n   return(\r\n        <div className=\"table-container\">\r\n         \t<h1>Reported Cases and Deaths by Country, Territory, or Conveyance</h1>\r\n            <Table unstackable inverted style={{ backgroundColor: '#333333', marginTop: '2rem' }} sortable celled>\r\n              <Table.Header>\r\n                <Table.Row>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'country' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'country' })}\r\n                  >\r\n                    Country\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'cases' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'cases' })}\r\n                  >\r\n                    Total Cases\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'todayCases' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'todayCases' })}\r\n                  >\r\n                    New Cases\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'deaths' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'deaths' })}\r\n                  >\r\n                    Total Deaths\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'todayDeaths' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'todayDeaths' })}\r\n                  >\r\n                    New Deaths\r\n                  </Table.HeaderCell>\r\n  \r\n                  <Table.HeaderCell\r\n                    sorted={column === 'recovered' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'recovered' })}\r\n                  >\r\n                    Total Recovered\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'active' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'active' })}\r\n                  >\r\n                    Active Cases\r\n                  </Table.HeaderCell>\r\n  \r\n                  <Table.HeaderCell\r\n                    sorted={column === 'critical' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'critical' })}\r\n                  >\r\n                    Serious, Critial\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'casesPerOneMillion' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'casesPerOneMillion' })}\r\n                  >\r\n                    Cases/1M pop.\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'deathsPerOneMillion' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'deathsPerOneMillion' })}\r\n                  >\r\n                    Deaths/1M pop.\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'tests' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'tests' })}\r\n                  >\r\n                    Total Tests\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'testsPerOneMillion' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'testsPerOneMillion' })}\r\n                  >\r\n                    Tests/1M pop.\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'population' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'population' })}\r\n                  >\r\n                    Population\r\n                  </Table.HeaderCell>\r\n          \r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body >\r\n                {data.map(({ country, cases, todayCases, deaths, todayDeaths, recovered, active, critical, casesPerOneMillion, deathsPerOneMillion, tests, testsPerOneMillion, population }) => (\r\n                  <Table.Row key={country}>\r\n                    <Table.Cell>{country}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(cases)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(todayCases)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(deaths)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(todayDeaths)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(recovered)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(active)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(critical)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(casesPerOneMillion)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(deathsPerOneMillion)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(tests)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(testsPerOneMillion)}</Table.Cell>\r\n                    <Table.Cell>{numberWithCommas(population)}</Table.Cell>\r\n                  </Table.Row>\r\n                ))}\r\n              </Table.Body>\r\n            </Table> \r\n   \t\t</div>\r\n   )\r\n}\r\n\r\nexport default TabularData;"],"sourceRoot":""}