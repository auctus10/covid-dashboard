{"version":3,"sources":["components/table-component/index.js"],"names":["sortReducer","state","action","type","direction","column","data","_","orderBy","Error","TabularData","covidData","useReducer","dispatch","className","unstackable","inverted","style","backgroundColor","marginTop","sortable","celled","Header","Row","HeaderCell","sorted","onClick","Body","map","country","cases","todayCases","deaths","todayDeaths","recovered","active","critical","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","population","key","Cell"],"mappings":"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","file":"static/js/4.5a18d513.chunk.js","sourcesContent":["import React, { useReducer } from 'react'\r\nimport _ from 'lodash'\r\nimport { Table } from 'semantic-ui-react'\r\n\r\nfunction sortReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CHANGE_SORT':\r\n      const direction = state.direction === 'ascending' ? 'desc' : 'asc';\r\n      return {\r\n        ...state,\r\n        column: action.column,\r\n        data:  _.orderBy(state.data, [action.column], [direction]),\r\n        direction:\r\n          state.direction === 'ascending' ? 'descending' : 'ascending',\r\n      }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nconst TabularData = ({covidData }) => {\r\n    const [state, dispatch] = useReducer(sortReducer, {\r\n      column: null,\r\n      data: covidData,\r\n      direction: 'descending',\r\n    })\r\n    const { column, data, direction } = state\r\n\r\n   return(\r\n        <div className=\"table-container\">\r\n         \t<h1>Reported Cases and Deaths by Country, Territory, or Conveyance</h1>\r\n            <Table unstackable inverted style={{ backgroundColor: '#333333', marginTop: '2rem' }} sortable celled>\r\n              <Table.Header>\r\n                <Table.Row>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'country' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'country' })}\r\n                  >\r\n                    Country\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'cases' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'cases' })}\r\n                  >\r\n                    Total Cases\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'todayCases' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'todayCases' })}\r\n                  >\r\n                    New Cases\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'deaths' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'deaths' })}\r\n                  >\r\n                    Total Deaths\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'todayDeaths' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'todayDeaths' })}\r\n                  >\r\n                    New Deaths\r\n                  </Table.HeaderCell>\r\n  \r\n                  <Table.HeaderCell\r\n                    sorted={column === 'recovered' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'recovered' })}\r\n                  >\r\n                    Total Recovered\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'active' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'active' })}\r\n                  >\r\n                    Active Cases\r\n                  </Table.HeaderCell>\r\n  \r\n                  <Table.HeaderCell\r\n                    sorted={column === 'critical' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'critical' })}\r\n                  >\r\n                    Serious, Critial\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'casesPerOneMillion' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'casesPerOneMillion' })}\r\n                  >\r\n                    Cases/1M pop.\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'deathsPerOneMillion' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'deathsPerOneMillion' })}\r\n                  >\r\n                    Deaths/1M pop.\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'tests' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'tests' })}\r\n                  >\r\n                    Total Tests\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'testsPerOneMillion' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'testsPerOneMillion' })}\r\n                  >\r\n                    Tests/1M pop.\r\n                  </Table.HeaderCell>\r\n\r\n                  <Table.HeaderCell\r\n                    sorted={column === 'population' ? direction : null}\r\n                    onClick={() => dispatch({ type: 'CHANGE_SORT', column: 'population' })}\r\n                  >\r\n                    Population\r\n                  </Table.HeaderCell>\r\n          \r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body >\r\n                {data.map(({ country, cases, todayCases, deaths, todayDeaths, recovered, active, critical, casesPerOneMillion, deathsPerOneMillion, tests, testsPerOneMillion, population }) => (\r\n                  <Table.Row key={country}>\r\n                    <Table.Cell>{country}</Table.Cell>\r\n                    <Table.Cell>{cases}</Table.Cell>\r\n                    <Table.Cell>{todayCases}</Table.Cell>\r\n                    <Table.Cell>{deaths}</Table.Cell>\r\n                    <Table.Cell>{todayDeaths}</Table.Cell>\r\n                    <Table.Cell>{recovered}</Table.Cell>\r\n                    <Table.Cell>{active}</Table.Cell>\r\n                    <Table.Cell>{critical}</Table.Cell>\r\n                    <Table.Cell>{casesPerOneMillion}</Table.Cell>\r\n                    <Table.Cell>{deathsPerOneMillion}</Table.Cell>\r\n                    <Table.Cell>{tests}</Table.Cell>\r\n                    <Table.Cell>{testsPerOneMillion}</Table.Cell>\r\n                    <Table.Cell>{population}</Table.Cell>\r\n                  </Table.Row>\r\n                ))}\r\n              </Table.Body>\r\n            </Table> \r\n   \t\t</div>\r\n   )\r\n}\r\n\r\nexport default TabularData;"],"sourceRoot":""}