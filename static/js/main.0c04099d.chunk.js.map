{"version":3,"sources":["components/map-chart/index.js","components/main-map/index.js","App.js","serviceWorker.js","index.js"],"names":["colorScale","scaleLinear","domain","range","memo","setTooltipContent","covidData","data-tip","projectionConfig","scale","stroke","strokeWidth","step","geography","geographies","map","geo","properties","NAME","ISO_A3","country","find","nation","countryInfo","iso3","color","key","rsmKey","onMouseEnter","cases","deaths","recovered","onMouseLeave","style","default","fill","outline","hover","pressed","TabularData","React","lazy","override","css","MainMap","useState","setCovidData","content","setContent","useEffect","fetchData","a","axios","get","response","data","console","log","renderLoader","display","justifyContent","alignItems","height","size","loading","length","marginTop","fallback","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kYAaQA,EAAaC,cAClBC,OAAO,CAAC,EAAG,OACXC,MAAM,CAAC,UAAW,YA0DNC,kBAxDE,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,kBAAmBC,EAAgB,EAAhBA,UACrC,OACE,oCACE,kBAAC,gBAAD,CAAeC,WAAS,GAAGC,iBAAkB,CAAEC,MAAO,MACtD,kBAAC,SAAD,CAAQC,OAAO,UAAUC,YAAa,KACtC,kBAAC,YAAD,CAAWD,OAAO,UAAUC,YAAa,GAAKC,KAAM,CAAC,GAAI,MACrD,kBAAC,cAAD,CAAaC,UAZrB,2GAaW,qBAAGC,YACUC,KAAI,SAAAC,GAAQ,IAAD,EACIA,EAAIC,WAArBC,EADa,EACbA,KAAMC,EADO,EACPA,OACRC,EAAUd,EAAUe,MAAK,SAAAC,GAAM,OAAIA,EAAOC,YAAYC,OAASL,KAC/DM,EAAQL,EAAUpB,EAAWoB,EAAO,QAAc,UACxD,OACA,kBAAC,YAAD,CACEM,IAAKV,EAAIW,OACTd,UAAWG,EACXY,aAAc,WAEVvB,EADCe,EAEC,oCACE,2BAAIF,GACJ,sCAAYE,EAAQS,OACpB,uCAAaT,EAAQU,QACrB,0CAAgBV,EAAQW,YAGV,GAAD,OAAIb,EAAJ,0BAGrBc,aAAc,WACZ3B,EAAkB,KAEpB4B,MAAO,CACLC,QAAS,CACPC,KAAMV,EACNW,QAAS,QAEXC,MAAO,CACLF,KAAM,OACNC,QAAS,QAEXE,QAAS,CACPH,KAAM,OACNC,QAAS,sB,mIClD/B,IAAMG,EAAcC,IAAMC,MAAK,kBAAM,uDAE/BC,EAAWC,cAAH,KA4DCC,EApDC,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACXvC,EADW,KACAwC,EADA,OAEYD,mBAAS,IAFrB,mBAEXE,EAFW,KAEFC,EAFE,KAIlBC,qBAAU,WACNC,MACF,IAEF,IAAMA,EAAS,uCAAG,4BAAAC,EAAA,+EAEaC,IAAMC,IAAI,qDAFvB,OAEJC,EAFI,OAIVR,EAAaQ,EAASC,MAJZ,gDAMVC,QAAQC,IAAR,MANU,yDAAH,qDAUTC,EAAe,kBACzB,yBAAKzB,MAAO,CAAC0B,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,OAAQ,UAAtF,IAAiG,kBAAC,IAAD,CAC7FnB,IAAKD,EACJqB,KAAM,GACNtC,MAAO,QACPuC,SAAS,MAIX,OAAwB,IAArB1D,EAAU2D,OAAqBP,IAG7B,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACA,kBAAC,IAAD,oBACA,kBAAC,IAAD,sBAGA,kBAAC,IAAD,KACN,wBAAIzB,MAAO,CAACiC,UAAW,SAAvB,gDACU,kBAAC,EAAD,CAAU5D,UAAWA,EAAWD,kBAAmB2C,IACnD,kBAAC,IAAD,KAAeD,IAEnB,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUoB,SAAUT,KAChB,kBAACnB,EAAD,CAAamB,aAAcA,IAAgBpD,UAAWA,SCjD/D8D,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.0c04099d.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Sphere,\r\n  Graticule\r\n} from \"react-simple-maps\";\r\nimport { scaleLinear } from \"d3-scale\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\n  const colorScale = scaleLinear()\r\n  .domain([1, 250000])\r\n  .range([\"#ffedea\", \"#ff5233\"]);\r\n\r\nconst MapChart = ({ setTooltipContent, covidData }) => {\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 180 }}>\r\n      <Sphere stroke=\"#E4E5E6\" strokeWidth={0.1} />\r\n      <Graticule stroke=\"#E4E5E6\" strokeWidth={0.1} step={[10, 10]} />\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => {\r\n                const { NAME, ISO_A3 } = geo.properties;\r\n                const country = covidData.find(nation => nation.countryInfo.iso3 === ISO_A3);\r\n                const color = country ? colorScale(country[\"deaths\"]) : \"#F5F4F6\";\r\n                return(\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    if(country){\r\n                      setTooltipContent(\r\n                        <>\r\n                          <p>{NAME}</p>\r\n                          <p>Cases - {country.cases}</p>\r\n                          <p>Deaths - {country.deaths}</p>\r\n                          <p>Recovered - {country.recovered}</p>\r\n                        </>);\r\n                    }else{\r\n                      setTooltipContent(`${NAME} - Data unavailable `)\r\n                    }\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: color,\r\n                      outline: \"none\"\r\n                    },\r\n                    hover: {\r\n                      fill: \"#F53\",\r\n                      outline: \"none\"\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                />\r\n                )\r\n                })\r\n            }\r\n          </Geographies>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useState, useEffect, Suspense } from 'react';\r\nimport axios from 'axios';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { css } from \"@emotion/core\";\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\nimport MapChart from '../map-chart';\r\n\r\nconst TabularData = React.lazy(() => import('../table-component'));\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\n\r\n\r\nconst MainMap = () => {\r\n    const [covidData, setCovidData] = useState([]);\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    },[]);\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await axios.get('https://corona.lmao.ninja/v2/countries?sort=cases');\r\n\r\n            setCovidData(response.data); \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const renderLoader = () => (\r\n<div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh'}}> <PacmanLoader\r\n    css={override}\r\n     size={25}\r\n     color={\"white\"}\r\n     loading={true}\r\n   /></div>\r\n    )\r\n\r\n   if(covidData.length === 0) return renderLoader()\r\n\r\n    return(\r\n        <>\r\n            <Tabs>\r\n                <TabList>\r\n                <Tab>Visual Data</Tab>\r\n                <Tab>Tabular Data</Tab>\r\n                </TabList>\r\n    \r\n                <TabPanel>\r\n\t\t\t\t\t\t\t\t\t\t<h1 style={{marginTop: '5rem'}}>Map showing the death rate due to Covid - 19</h1>\r\n                    <MapChart covidData={covidData} setTooltipContent={setContent} />\r\n                    <ReactTooltip>{content}</ReactTooltip>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    <Suspense fallback={renderLoader()}>\r\n                        <TabularData renderLoader={renderLoader()} covidData={covidData} />\r\n                    </Suspense>\r\n                </TabPanel>\r\n             </Tabs>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainMap;","import React from 'react';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport MainMap from './components/main-map';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <MainMap />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n// Let's say you want to add custom colors\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}